[4mDMIDECODE[24m(8)                                                                                                                                                                                              System Manager's Manual                                                                                                                                                                                              [4mDMIDECODE[24m(8)

[1mNAME[0m
       dmidecode - DMI table decoder

[1mSYNOPSIS[0m
       [1mdmidecode [22m[[4mOPTIONS[24m]

[1mDESCRIPTION[0m
       [1mdmidecode [22mis a tool for dumping a computer's DMI (some say SMBIOS) table contents in a human-readable format. This table contains a description of the system's hardware components, as well as other useful pieces of information such as serial numbers and BIOS revision. Thanks to this table, you can retrieve this information without having to probe for the actual hardware.  While this is a good point in terms of report
       speed and safeness, this also makes the presented information possibly unreliable.

       The DMI table doesn't only describe what the system is currently made of, it also can report the possible evolutions (such as the fastest supported CPU or the maximal amount of memory supported).

       SMBIOS stands for System Management BIOS, while DMI stands for Desktop Management Interface. Both standards are tightly related and developed by the DMTF (Desktop Management Task Force).

       As you run it, [1mdmidecode [22mwill try to locate the DMI table. It will first try to read the DMI table from sysfs, and next try reading directly from memory if sysfs access failed.  If [1mdmidecode [22msucceeds in locating a valid DMI table, it will then parse this table and display a list of records like this one:

       Handle 0x0002, DMI type 2, 8 bytes.  Base Board Information
               Manufacturer: Intel
               Product Name: C440GX+
               Version: 727281-001
               Serial Number: INCY92700942

       Each record has:

       ‚Ä¢ A handle. This is a unique identifier, which allows records to reference each other. For example, processor records usually reference cache memory records using their handles.

       ‚Ä¢ A type. The SMBIOS specification defines different types of elements a computer can be made of. In this example, the type is 2, which means that the record contains "Base Board Information".

       ‚Ä¢ A size. Each record has a 4-byte header (2 for the handle, 1 for the type, 1 for the size), the rest is used by the record data. This value doesn't take text strings into account (these are placed at the end of the record), so the actual length of the record may be (and is often) greater than the displayed value.

       ‚Ä¢ Decoded values. The information presented of course depends on the type of record. Here, we learn about the board's manufacturer, model, version and serial number.

[1mOPTIONS[0m
       [1m-d[22m, [1m--dev-mem [4m[22mFILE[0m
              Read memory from device [4mFILE[24m (default: [4m/dev/mem[24m)

       [1m-q[22m, [1m--quiet[0m
              Be less verbose. Unknown, inactive and OEM-specific entries are not displayed. Meta-data and handle references are hidden.

           [1m--no-quirks[0m
              Decode everything exactly as it is in the table, without trying to fix up common mistakes or hide irrelevant fields.  This mode is primarily aimed at firmware developers.

       [1m-s[22m, [1m--string [4m[22mKEYWORD[0m
              Only  display  the  value  of the DMI string identified by [4mKEYWORD[24m.  It must be a keyword from the following list: [1mbios-vendor[22m, [1mbios-version[22m, [1mbios-release-date[22m, [1mbios-revision[22m, [1mfirmware-revision[22m, [1msystem-manufacturer[22m, [1msystem-product-name[22m, [1msystem-version[22m, [1msystem-serial-number[22m, [1msystem-uuid[22m, [1msystem-sku-number[22m, [1msystem-family[22m, [1mbaseboard-manufacturer[22m, [1mbaseboard-product-name[22m, [1mbaseboard-version[22m, [1mbaseboard-serial-number[22m,
              [1mbaseboard-asset-tag[22m, [1mchassis-manufacturer[22m, [1mchassis-type[22m, [1mchassis-version[22m, [1mchassis-serial-number[22m, [1mchassis-asset-tag[22m, [1mprocessor-family[22m, [1mprocessor-manufacturer[22m, [1mprocessor-version[22m, [1mprocessor-frequency[22m.  Each keyword corresponds to a given DMI type and a given offset within this entry type.  Not all strings may be meaningful or even defined on all systems. Some keywords may return more than one result on some  sys‚Äê
              tems (e.g.  [1mprocessor-version [22mon a multi-processor system).  If [4mKEYWORD[24m is not provided or not valid, a list of all valid keywords is printed and [1mdmidecode [22mexits with an error.  This option cannot be used more than once.

              Note: on Linux, most of these strings can alternatively be read directly from [1msysfs[22m, typically from files under [4m/sys/devices/virtual/dmi/id[24m.  Most of these files are even readable by regular users.

           [1m--list-strings[0m
              List available string keywords, which can then be passed to the [1m--string [22moption.

       [1m-t[22m, [1m--type [4m[22mTYPE[0m
              Only  display  the  entries of type [4mTYPE[24m. It can be either a DMI type number, or a comma-separated list of type numbers, or a keyword from the following list: [1mbios[22m, [1msystem[22m, [1mbaseboard[22m, [1mchassis[22m, [1mprocessor[22m, [1mmemory[22m, [1mcache[22m, [1mconnector[22m, [1mslot[22m.  Refer to the DMI TYPES section below for details.  If this option is used more than once, the set of displayed entries will be the union of all the given types.  If [4mTYPE[24m is not
              provided or not valid, a list of all valid keywords is printed and [1mdmidecode [22mexits with an error.

           [1m--list-types[0m
              List available type keywords, which can then be passed to the [1m--type [22moption.

       [1m-H[22m, [1m--handle [4m[22mHANDLE[0m
              Only display the entry whose handle matches [4mHANDLE[24m.  [4mHANDLE[24m is a 16-bit integer.

       [1m-u[22m, [1m--dump[0m
              Do not decode the entries, dump their contents as hexadecimal instead.  Note that this is still a text output, no binary data will be thrown upon you. The strings attached to each entry are displayed as both hexadecimal and ASCII. This option is mainly useful for debugging.

           [1m--dump-bin [4m[22mFILE[0m
              Do not decode the entries, instead dump the DMI data to a file in binary form. The generated file is suitable to pass to [1m--from-dump [22mlater.  [4mFILE[24m must not exist.

           [1m--from-dump [4m[22mFILE[0m
              Read the DMI data from a binary file previously generated using [1m--dump-bin[22m.

           [1m--no-sysfs[0m
              Do not attempt to read DMI data from sysfs files. This is mainly useful for debugging.

           [1m--oem-string [4m[22mN[0m
              Only display the value of the OEM string number [4mN[24m. The first OEM string has number [1m1[22m. With special value [1mcount[22m, return the number of OEM strings instead.

       [1m-h[22m, [1m--help[0m
              Display usage information and exit

       [1m-V[22m, [1m--version[0m
              Display the version and exit

       Options [1m--string[22m, [1m--type, --dump-bin [22mand [1m--oem-string [22mdetermine the output format and are mutually exclusive.

       Please note in case of [1mdmidecode [22mis run on a system with BIOS that boasts new SMBIOS specification, which is not supported by the tool yet, it will print out relevant message in addition to requested data on the very top of the output. Thus informs the output data is not reliable.

[1mDMI TYPES[0m
       The SMBIOS specification defines the following DMI types:
       Type   Information
       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          0   BIOS
          1   System
          2   Baseboard
          3   Chassis
          4   Processor
          5   Memory Controller
          6   Memory Module
          7   Cache
          8   Port Connector
          9   System Slots
         10   On Board Devices
         11   OEM Strings
         12   System Configuration Options
         13   BIOS Language
         14   Group Associations
         15   System Event Log
         16   Physical Memory Array
         17   Memory Device
         18   32-bit Memory Error
         19   Memory Array Mapped Address
         20   Memory Device Mapped Address
         21   Built-in Pointing Device
         22   Portable Battery
         23   System Reset
         24   Hardware Security
         25   System Power Controls
         26   Voltage Probe
         27   Cooling Device
         28   Temperature Probe
         29   Electrical Current Probe
         30   Out-of-band Remote Access
         31   Boot Integrity Services
         32   System Boot
         33   64-bit Memory Error
         34   Management Device
         35   Management Device Component
         36   Management Device Threshold Data
         37   Memory Channel
         38   IPMI Device
         39   Power Supply
         40   Additional Information
         41   Onboard Devices Extended Information
         42   Management Controller Host Interface

       Additionally, type 126 is used for disabled entries and type 127 is an end-of-table marker. Types 128 to 255 are for OEM-specific data.  [1mdmidecode [22mwill display these entries by default, but it can only decode them when the vendors have contributed documentation or code for them.

       Keywords can be used instead of type numbers with [1m--type[22m.  Each keyword is equivalent to a list of type numbers:

       Keyword     Types
       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
       bios        0, 13
       system      1, 12, 15, 23, 32
       baseboard   2, 10, 41
       chassis     3
       processor   4
       memory      5, 6, 16, 17
       cache       7
       connector   8
       slot        9

       Keywords are matched case-insensitively. The following command lines are equivalent:

       ‚Ä¢ dmidecode --type 0 --type 13

       ‚Ä¢ dmidecode --type 0,13

       ‚Ä¢ dmidecode --type bios

       ‚Ä¢ dmidecode --type BIOS

[1mBINARY DUMP FILE FORMAT[0m
       The binary dump files generated by [1m--dump-bin [22mand read using [1m--from-dump [22mare formatted as follows:

       ‚Ä¢ The SMBIOS or DMI entry point is located at offset 0x00.  It is crafted to hard-code the table address at offset 0x20.

       ‚Ä¢ The DMI table is located at offset 0x20.

[1mUUID FORMAT[0m
       There is some ambiguity about how to interpret the UUID fields prior to SMBIOS specification version 2.6. There was no mention of byte swapping, and RFC 4122 says that no byte swapping should be applied by default. However, SMBIOS specification version 2.6 (and later) explicitly states that the first 3 fields of the UUID should be read as little-endian numbers (byte-swapped).  Furthermore, it implies  that  the  same
       was  already true for older versions of the specification, even though it was not mentioned. In practice, many hardware vendors were not byte-swapping the UUID. So, in order to preserve compatibility, it was decided to interpret the UUID fields according to RFC 4122 (no byte swapping) when the SMBIOS version is older than 2.6, and to interpret the first 3 fields as little-endian (byte-swapped) when the SMBIOS version
       is 2.6 or later. The Linux kernel follows the same logic.

[1mFILES[0m
       [4m/dev/mem[0m
       [4m/sys/firmware/dmi/tables/smbios_entry_point[24m (Linux only)
       [4m/sys/firmware/dmi/tables/DMI[24m (Linux only)

[1mBUGS[0m
       More often than not, information contained in the DMI tables is inaccurate, incomplete or simply wrong.

[1mAUTHORS[0m
       Alan Cox, Jean Delvare

[1mSEE ALSO[0m
       [1mbiosdecode[22m(8), [1mmem[22m(4), [1mownership[22m(8), [1mvpddecode[22m(8)

dmidecode                                                                                                                                                                                                      February 2023                                                                                                                                                                                                   [4mDMIDECODE[24m(8)
